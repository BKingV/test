import pandas as pd
import streamlit as st
import openpyxl  

@st.cache_data
def load_questions_from_excel(file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ Excel, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ A, —Ä–∞–≤–Ω–æ–π 1."""
    st.write("üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª Excel...")
    df = pd.read_excel(file, sheet_name=None, engine="openpyxl")  
    questions = []

    for sheet_name, data in df.items():
        st.write(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –µ—Å—Ç—å "1"
        start_row = None
        for i, value in enumerate(data.iloc[:, 0]):  
            if pd.notna(value) and str(value).strip() == "1":
                start_row = i
                break  

        if start_row is None:
            st.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç '{sheet_name}' –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '1' –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ).")
            continue  

        # –û–±—Ä–µ–∑–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±—ã–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ "1"
        data = data.iloc[start_row:].reset_index(drop=True)
        data.columns = data.iloc[0]  # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        data = data[1:].reset_index(drop=True)  

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        for _, row in data.iterrows():
            if len(row) < 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–æ–∫
                continue  

            number = str(row.iloc[0]).strip()  
            if not number.endswith("."):
                number += "."  

            questions.append({
                "block": sheet_name,  
                "topic": row.iloc[1] if pd.notna(row.iloc[1]) else "–ë–µ–∑ —Ç–µ–º—ã",  
                "number": number,  
                "question": row.iloc[2] if pd.notna(row.iloc[2]) else "–í–æ–ø—Ä–æ—Å –Ω–µ —É–∫–∞–∑–∞–Ω",  
                "options": str(row.iloc[3]).split(";") if pd.notna(row.iloc[3]) else [],  
                "correct_answers": str(row.iloc[4]).split(";") if pd.notna(row.iloc[4]) else []  
            })

    st.write(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤!")
    return questions

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–∞."""
    st.title("üìù –¢—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Å—Ç—É")
    uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", type=["xlsx", "xls"])

    if uploaded_file:
        with st.spinner("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã..."):
            questions = load_questions_from_excel(uploaded_file)

        if not questions:
            st.error("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return

        blocks = list(set(q['block'] for q in questions))
        selected_block = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫", blocks)
        block_questions = [q for q in questions if q['block'] == selected_block]

        topics = list(set(q['topic'] for q in block_questions))
        topic_dict = {topic: [q for q in block_questions if q['topic'] == topic] for topic in topics}

        score = 0
        for topic, topic_questions in topic_dict.items():
            st.write(f"### –¢–µ–º–∞: {topic}")

            for idx, q in enumerate(topic_questions):
                st.write(f"**{q['number']} {q['question']}**")
                selected_option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", q['options'], key=f"q_{idx}", index=None)

                if st.button(f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å {q['number']}", key=f"check_{idx}"):
                    if selected_option and selected_option in q['correct_answers']:
                        st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                        score += 1
                    elif selected_option:
                        st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {', '.join(q['correct_answers'])}")
                    else:
                        st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π.")

        st.write(f"üèÜ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(questions)}")

if __name__ == "__main__":
    main()
