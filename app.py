import streamlit as st
from docx import Document

st.title("üìÑ –û–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Word-—Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏", type=["docx"])

def extract_themes_and_questions(doc):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫, —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    themes = {}
    block_name = None
    current_theme = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ 1-–≥–æ —É—Ä–æ–≤–Ω—è)
    for para in doc.paragraphs:
        text = para.text.strip()
        style = para.style.name

        if style == "Heading 1" and not block_name:  # –ë–ª–æ–∫ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
            block_name = text

        elif style == "Heading 2":  # –¢–µ–º—ã
            current_theme = text.replace("–¢–ï–ú–ê:", "").strip()
            themes[current_theme] = []

    # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã (–æ—Ç–ª–∞–¥–∫–∞)
    st.subheader("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:")
    for theme in themes.keys():
        st.write(f"üîπ {theme}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–µ–º–µ
    last_valid_theme = None  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ç–µ–º—É
    for table in doc.tables:
        if not current_theme:
            current_theme = last_valid_theme  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π –Ω–µ –±—ã–ª–æ –Ω–æ–≤–æ–π —Ç–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é

        st.write("üîπ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É**")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        st.write(f"üìå –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {current_theme}")

        if not current_theme:
            st.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–º–∞

        rows = table.rows
        if len(rows) < 2:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã

        headers = [cell.text.strip().lower() for cell in rows[0].cells]
        if "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞" not in headers or "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤" not in headers:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

        question_idx = headers.index("—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
        answers_idx = headers.index("–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")
        correct_idx = headers.index("—ç—Ç–∞–ª–æ–Ω") if "—ç—Ç–∞–ª–æ–Ω" in headers else None

        for row in rows[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            question_text = row.cells[question_idx].text.strip()
            answer_text = row.cells[answers_idx].text.strip()
            correct_text = row.cells[correct_idx].text.strip() if correct_idx else ""

            if current_theme:
                themes[current_theme].append({
                    "question": question_text,
                    "answers": answer_text.split("\n"),  # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                    "correct": correct_text.split("\n")  # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                })

        last_valid_theme = current_theme  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ç–µ–º—É

    return block_name, themes

if uploaded_file:
    doc = Document(uploaded_file)
    block_name, themes = extract_themes_and_questions(doc)

    if not themes:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
    else:
        if "themes" not in st.session_state:
            st.session_state["themes"] = themes
            st.session_state["block_name"] = block_name
            st.session_state["selected_theme"] = None
            st.session_state["questions"] = []
            st.session_state["current_question"] = 0
            st.session_state["show_result"] = False
            st.session_state["selected_answers"] = {}

        # –í—ã–≤–æ–¥ –±–ª–æ–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
        if st.session_state["block_name"]:
            st.header(f"üìò {st.session_state['block_name']}")

        # –í—ã–±–æ—Ä —Ç–µ–º—ã
        st.header("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É")
        theme = st.selectbox("–¢–µ–º–∞:", list(themes.keys()), index=0 if not st.session_state["selected_theme"] else list(themes.keys()).index(st.session_state["selected_theme"]))

        if theme:
            st.session_state["selected_theme"] = theme

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–º–µ
            if len(themes[theme]) > 0:
                st.session_state["questions"] = themes[theme]
                st.session_state["selected_answers"] = {i: [] for i in range(len(st.session_state["questions"]))}

                if st.button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"):
                    st.session_state["current_question"] = 0
                    st.session_state["show_result"] = False
                    st.session_state["selected_answers"] = {i: [] for i in range(len(st.session_state["questions"]))}
                    st.rerun()
            else:
                st.warning("‚ö†Ô∏è –í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–¥—É—Ç –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–∞–º–∏.")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
if "questions" in st.session_state and len(st.session_state["questions"]) > 0 and not st.session_state.get("show_result", False):
    q_idx = st.session_state["current_question"]
    question_data = st.session_state["questions"][q_idx]

    st.subheader(f"{st.session_state['selected_theme']} - –í–æ–ø—Ä–æ—Å {q_idx + 1} –∏–∑ {len(st.session_state['questions'])}")
    st.write(question_data["question"])

    selected_answers = st.session_state["selected_answers"].get(q_idx, [])

    for i, answer in enumerate(question_data["answers"]):
        key = f"q{q_idx}_a{i}"
        checked = answer in selected_answers
        if st.checkbox(answer, key=key, value=checked):
            if answer not in selected_answers:
                selected_answers.append(answer)
        else:
            if answer in selected_answers:
                selected_answers.remove(answer)

    st.session_state["selected_answers"][q_idx] = selected_answers

    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col1:
        if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å") and q_idx > 0:
            st.session_state["current_question"] -= 1
            st.rerun()

    with col3:
        if q_idx + 1 < len(st.session_state["questions"]):
            if st.button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.session_state["current_question"] += 1
                st.rerun()
        else:
            if st.button("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"):
                st.session_state["show_result"] = True
                st.rerun()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
if st.session_state.get("show_result", False):
    st.success("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

    total_questions = len(st.session_state["questions"])
    correct_count = 0

    # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"
    for idx, question in enumerate(st.session_state["questions"]):
        correct_set = set(question["correct"])
        selected_set = set(st.session_state["selected_answers"].get(idx, []))

        if selected_set == correct_set:
            correct_count += 1

    st.write(f"üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **{correct_count} –∏–∑ {total_questions}** –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")  

    if st.button("–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞"):
        st.session_state["selected_theme"] = None
        st.session_state["questions"] = []
        st.session_state["current_question"] = 0
        st.session_state["show_result"] = False
        st.session_state["selected_answers"] = {}
        st.rerun()
