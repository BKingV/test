import streamlit as st
from docx import Document

st.title("üìÑ –û–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Word-—Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏", type=["docx"])

def extract_themes_and_questions(doc):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –∏–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞"""
    themes = {}
    current_theme = None
    processing_started = False  
    tables_iter = iter(doc.tables)  

    for para in doc.paragraphs:
        text = para.text.strip()

        if text.startswith("–¢–ï–ú–ê:"):  
            current_theme = text.replace("–¢–ï–ú–ê:", "").strip()

            try:
                table = next(tables_iter)  
                themes[current_theme] = []

                rows = table.rows
                if len(rows) < 2:
                    continue  

                headers = [cell.text.strip().lower() for cell in rows[0].cells]
                if "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞" not in headers or "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤" not in headers:
                    continue  

                question_idx = headers.index("—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
                answers_idx = headers.index("–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")
                correct_idx = headers.index("—ç—Ç–∞–ª–æ–Ω") if "—ç—Ç–∞–ª–æ–Ω" in headers else None

                current_question = None

                for row in rows[1:]:  
                    question_text = row.cells[question_idx].text.strip()
                    answer_text = row.cells[answers_idx].text.strip()
                    correct_text = row.cells[correct_idx].text.strip() if correct_idx else ""

                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                    if current_question is None or current_question["question"] != question_text:
                        current_question = {
                            "question": question_text,
                            "answers": [],
                            "correct": []
                        }
                        themes[current_theme].append(current_question)

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    current_question["answers"].append(answer_text)
                    if correct_text:
                        current_question["correct"].append(answer_text)

                processing_started = True  

            except StopIteration:
                # –ù–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —Ç–µ–º—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                pass  

    return themes

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

if uploaded_file:
    doc = Document(uploaded_file)
    themes = extract_themes_and_questions(doc)

    if not themes:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
    else:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if "themes" not in st.session_state:
            st.session_state["themes"] = themes
            st.session_state["selected_theme"] = None
            st.session_state["questions"] = []
            st.session_state["current_question"] = 0
            st.session_state["test_started"] = False
            st.session_state["show_result"] = False
            st.session_state["selected_answers"] = {}
            st.session_state["show_confirm_exit"] = False

        # 1. –ï—Å–ª–∏ —Ç–µ—Å—Ç –ù–ï –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã –∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"
        if not st.session_state["test_started"]:
            st.header("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É")
            theme_list = list(themes.keys())
            if not theme_list:
                st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º.")
            else:
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É
                selected = st.selectbox("–¢–µ–º–∞:", theme_list, index=0)
                st.session_state["selected_theme"] = selected

                # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç
                if st.button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"):
                    st.session_state["test_started"] = True
                    st.session_state["current_question"] = 0
                    st.session_state["show_result"] = False
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
                    st.session_state["questions"] = st.session_state["themes"][selected]
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
                    st.session_state["selected_answers"] = {i: [] for i in range(len(st.session_state["questions"]))}
                    st.rerun()

        # 2. –ï—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        else:
            # --- –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã" (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º) ---
            col1, col2 = st.columns([5,1])
            with col2:
                if st.button("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã"):
                    st.session_state["show_confirm_exit"] = True

            # –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
            if st.session_state["show_confirm_exit"]:
                st.warning("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.")
                c1, c2 = st.columns(2)
                with c1:
                    if st.button("‚úÖ –î–∞, –≤—ã–π—Ç–∏"):
                        # –°–±—Ä–æ—Å —Ç–µ—Å—Ç–∞
                        st.session_state["test_started"] = False
                        st.session_state["selected_theme"] = None
                        st.session_state["questions"] = []
                        st.session_state["current_question"] = 0
                        st.session_state["show_result"] = False
                        st.session_state["selected_answers"] = {}
                        st.session_state["show_confirm_exit"] = False
                        st.rerun()
                with c2:
                    if st.button("‚ùå –û—Ç–º–µ–Ω–∞"):
                        st.session_state["show_confirm_exit"] = False
                        st.rerun()

            # --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å ---
            if st.session_state["questions"] and not st.session_state["show_result"]:
                q_idx = st.session_state["current_question"]
                if q_idx >= len(st.session_state["questions"]):
                    # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª –º–∞—Å—Å–∏–≤–∞
                    q_idx = len(st.session_state["questions"]) - 1

                question_data = st.session_state["questions"][q_idx]

                st.subheader(f"{st.session_state['selected_theme']} - –í–æ–ø—Ä–æ—Å {q_idx + 1} –∏–∑ {len(st.session_state['questions'])}")
                st.write(question_data["question"])

                # –û—Ç–º–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                selected_answers = st.session_state["selected_answers"].get(q_idx, [])

                # –ß–µ–∫–±–æ–∫—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                for i, answer in enumerate(question_data["answers"]):
                    key = f"q{q_idx}_a{i}"
                    checked = answer in selected_answers
                    if st.checkbox(answer, key=key, value=checked):
                        if answer not in selected_answers:
                            selected_answers.append(answer)
                    else:
                        if answer in selected_answers:
                            selected_answers.remove(answer)

                st.session_state["selected_answers"][q_idx] = selected_answers

                # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                c_left, c_right = st.columns([1,1])
                with c_left:
                    # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å (—É–±–∏—Ä–∞–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º)
                    if q_idx > 0:
                        if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                            st.session_state["current_question"] -= 1
                            st.rerun()

                with c_right:
                    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ó–∞–≤–µ—Ä—à–∏—Ç—å
                    if q_idx + 1 < len(st.session_state["questions"]):
                        if st.button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                            st.session_state["current_question"] += 1
                            st.rerun()
                    else:
                        if st.button("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"):
                            st.session_state["show_result"] = True
                            st.rerun()

            # 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if st.session_state.get("show_result", False):
                st.success("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

                total_questions = len(st.session_state["questions"])
                correct_count = 0

                for idx, question in enumerate(st.session_state["questions"]):
                    correct_set = set(question["correct"])
                    selected_set = set(st.session_state["selected_answers"].get(idx, []))
                    if selected_set == correct_set:
                        correct_count += 1

                st.write(f"üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **{correct_count} –∏–∑ {total_questions}** –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")  

                if st.button("–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞"):
                    st.session_state["test_started"] = False
                    st.session_state["selected_theme"] = None
                    st.session_state["questions"] = []
                    st.session_state["current_question"] = 0
                    st.session_state["show_result"] = False
                    st.session_state["selected_answers"] = {}
                    st.session_state["show_confirm_exit"] = False
                    st.rerun()
