import streamlit as st
from docx import Document

def extract_themes_and_questions(doc):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º—ã, –ø–æ–¥—Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    themes = {}
    tables = doc.tables
    
    for table in tables:
        rows = table.rows
        if len(rows) < 2:
            continue
        
        headers = [cell.text.strip().lower() for cell in rows[0].cells]
        if "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞" not in headers or "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞" not in headers:
            continue
        
        question_idx = headers.index("—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
        answers_idx = headers.index("–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞")
        correct_idx = headers.index("—ç—Ç–∞–ª–æ–Ω") if "—ç—Ç–∞–ª–æ–Ω" in headers else None
        
        current_theme = "–¢–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        current_subtheme = None
        themes[current_theme] = []
        
        for row in rows[1:]:
            first_cell_text = row.cells[0].text.strip()
            question_text = row.cells[question_idx].text.strip()
            answer_text = row.cells[answers_idx].text.strip()
            correct_text = row.cells[correct_idx].text.strip() if correct_idx else ""
            
            if first_cell_text and first_cell_text.lower() == first_cell_text:
                current_subtheme = first_cell_text
                continue
            
            question_data = {
                "question": question_text,
                "answers": [answer_text],
                "correct": [correct_text] if correct_text else [],
                "subtheme": current_subtheme,
            }
            themes[current_theme].append(question_data)
    
    return themes

st.title("üìÑ –û–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º")
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Word-—Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏", type=["docx"])

if uploaded_file:
    doc = Document(uploaded_file)
    themes = extract_themes_and_questions(doc)

    if not themes:
        st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
    else:
        st.session_state["themes"] = themes
        st.session_state["selected_theme"] = None
        st.session_state["selected_subtheme"] = None
        st.session_state["questions"] = []
        st.session_state["test_started"] = False

        selected_theme = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", list(themes.keys()), key="theme_select")
        subthemes = list(set(q["subtheme"] for q in themes[selected_theme] if q["subtheme"]))

        if subthemes:
            selected_subtheme = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É", subthemes, key="subtheme_select")
        
        if st.button("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"):
            st.session_state["selected_theme"] = selected_theme
            st.session_state["selected_subtheme"] = selected_subtheme if subthemes else None
            st.session_state["questions"] = [q for q in themes[selected_theme] if q["subtheme"] == selected_subtheme or not subthemes]
            st.session_state["test_started"] = True
            st.session_state["current_question"] = 0
            st.session_state["selected_answers"] = {}
            st.rerun()

if st.session_state.get("test_started", False):
    q_idx = st.session_state["current_question"]
    questions = st.session_state["questions"]

    if q_idx < len(questions):
        question_data = questions[q_idx]
        st.subheader(f"–í–æ–ø—Ä–æ—Å {q_idx + 1} –∏–∑ {len(questions)}")
        st.write(question_data["question"])
        
        selected_answers = st.session_state["selected_answers"].get(q_idx, [])
        for i, answer in enumerate(question_data["answers"]):
            key = f"q{q_idx}_a{i}"
            checked = answer in selected_answers
            if st.checkbox(answer, key=key, value=checked):
                if answer not in selected_answers:
                    selected_answers.append(answer)
            else:
                if answer in selected_answers:
                    selected_answers.remove(answer)

        st.session_state["selected_answers"][q_idx] = selected_answers
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if q_idx > 0 and st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.session_state["current_question"] -= 1
                st.rerun()
        with col3:
            if q_idx + 1 < len(questions):
                if st.button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                    st.session_state["current_question"] += 1
                    st.rerun()
            else:
                if st.button("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"):
                    st.session_state["show_result"] = True
                    st.rerun()

if st.session_state.get("show_result", False):
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞")
    correct_count = sum(1 for i, q in enumerate(st.session_state["questions"]) if set(st.session_state["selected_answers"].get(i, [])) == set(q["correct"]))
    total_count = len(st.session_state["questions"])
    st.success(f"üéâ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_count} –∏–∑ {total_count} –≤–æ–ø—Ä–æ—Å–æ–≤.")
    if st.button("üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑"):
        st.session_state["test_started"] = False
        st.session_state["show_result"] = False
        st.rerun()

