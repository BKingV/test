import streamlit as st
from docx import Document

st.title("üìÑ –û–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Word-—Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏", type=["docx"])

def extract_themes_and_questions(doc):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º—ã, –ø–æ–¥—Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –∏–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞"""
    themes = {}
    
    st.write("üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:", len(doc.tables))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
    tables_iter = iter(doc.tables)

    for para in doc.paragraphs:
        text = para.text.strip()

        if text.startswith("–¢–ï–ú–ê:"):  
            current_theme = text.replace("–¢–ï–ú–ê:", "").strip()
            themes[current_theme] = {}

            try:
                table = next(tables_iter)  
                rows = table.rows
                if len(rows) < 2:
                    continue  

                headers = [cell.text.strip().lower() for cell in rows[0].cells]
                if "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞" not in headers or "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞" not in headers:
                    continue  

                question_idx = headers.index("—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
                answers_idx = headers.index("–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞")
                correct_idx = headers.index("—ç—Ç–∞–ª–æ–Ω") if "—ç—Ç–∞–ª–æ–Ω" in headers else None

                current_subtheme = None

                for row in rows[1:]:
                    first_cell_text = row.cells[0].text.strip()
                    question_text = row.cells[question_idx].text.strip()
                    answer_text = row.cells[answers_idx].text.strip()
                    correct_text = row.cells[correct_idx].text.strip() if correct_idx else ""

                    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–µ–º—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
                    if first_cell_text and not question_text:
                        current_subtheme = first_cell_text
                        themes[current_theme][current_subtheme] = []
                        continue

                    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–¥—Ç–µ–º–µ (–∏–ª–∏ —Ç–µ–º–µ)
                    if current_subtheme:
                        target_list = themes[current_theme][current_subtheme]
                    else:
                        target_list = themes[current_theme].setdefault("–ë–µ–∑ –ø–æ–¥—Ç–µ–º", [])

                    question_entry = {
                        "question": question_text,
                        "answers": [],
                        "correct": []
                    }

                    if not target_list or target_list[-1]["question"] != question_text:
                        target_list.append(question_entry)

                    target_list[-1]["answers"].append(answer_text)
                    if correct_text:
                        target_list[-1]["correct"].append(answer_text)

            except StopIteration:
                pass  

    return themes

if uploaded_file:
    doc = Document(uploaded_file)
    themes = extract_themes_and_questions(doc)

    if not themes:
        st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
    else:
        if "themes" not in st.session_state:
            st.session_state["themes"] = themes
            st.session_state["selected_theme"] = None
            st.session_state["selected_subtheme"] = None
            st.session_state["questions"] = []
            st.session_state["current_question"] = 0
            st.session_state["test_started"] = False
            st.session_state["show_result"] = False
            st.session_state["selected_answers"] = {}
            st.session_state["show_confirm_exit"] = False

        st.subheader("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:")
        selected_theme = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", list(themes.keys()), key="theme_select")

        if selected_theme:
            subthemes = list(themes[selected_theme].keys())

            if subthemes and subthemes != ["–ë–µ–∑ –ø–æ–¥—Ç–µ–º"]:
                st.subheader("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É:")
                selected_subtheme = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É", subthemes, key="subtheme_select")
            else:
                selected_subtheme = None  

            if st.button("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"):
                st.session_state["selected_theme"] = selected_theme
                st.session_state["selected_subtheme"] = selected_subtheme
                st.session_state["questions"] = themes[selected_theme].get(selected_subtheme, [])
                st.session_state["test_started"] = True
                st.session_state["current_question"] = 0
                st.session_state["selected_answers"] = {}
                st.rerun()

if st.session_state.get("test_started", False):
    q_idx = st.session_state["current_question"]
    questions = st.session_state["questions"]

    if q_idx < len(questions):
        question_data = questions[q_idx]

        st.subheader(f"–í–æ–ø—Ä–æ—Å {q_idx + 1} –∏–∑ {len(questions)}")
        st.write(question_data["question"])

        selected_answers = st.session_state["selected_answers"].get(q_idx, [])

        for i, answer in enumerate(question_data["answers"]):
            key = f"q{q_idx}_a{i}"
            checked = answer in selected_answers
            if st.checkbox(answer, key=key, value=checked):
                if answer not in selected_answers:
                    selected_answers.append(answer)
            else:
                if answer in selected_answers:
                    selected_answers.remove(answer)

        st.session_state["selected_answers"][q_idx] = selected_answers

        col1, col2, col3 = st.columns([1, 2, 1])

        with col1:
            if q_idx > 0:
                if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                    st.session_state["current_question"] -= 1
                    st.rerun()

        with col3:
            if q_idx + 1 < len(questions):
                if st.button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                    st.session_state["current_question"] += 1
                    st.rerun()
            else:
                if st.button("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"):
                    st.session_state["show_result"] = True
                    st.rerun()

if st.session_state.get("show_result", False):
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞")

    results = []
    correct_count = 0
    total_questions = len(st.session_state["questions"])

    for i, question in enumerate(st.session_state["questions"]):
        user_answers = st.session_state["selected_answers"].get(i, [])
        correct_answers = question["correct"]
        is_correct = set(user_answers) == set(correct_answers)

        if is_correct:
            correct_count += 1
        else:
            results.append({
                "–í–æ–ø—Ä–æ—Å": question["question"],
                "–í–∞—à –æ—Ç–≤–µ—Ç": ", ".join(user_answers),
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": ", ".join(correct_answers)
            })

    st.write(f"‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_count} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤.")

    if results:
        st.write("‚ùå –û—à–∏–±–∫–∏:")
        for res in results:
            with st.expander(res["–í–æ–ø—Ä–æ—Å"]):
                st.write(f"**–í–∞—à –æ—Ç–≤–µ—Ç:** {res['–í–∞—à –æ—Ç–≤–µ—Ç']}")
                st.write(f"‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {res['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç']}")

    if st.button("üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑"):
        st.session_state["test_started"] = False
        st.session_state["show_result"] = False
        st.session_state["selected_theme"] = None
        st.session_state["selected_subtheme"] = None
        st.session_state["questions"] = []
        st.session_state["current_question"] = 0
        st.session_state["selected_answers"] = {}
        st.rerun()
