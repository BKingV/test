import streamlit as st
import pandas as pd
from docx import Document

st.title("üìÑ –û–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Word-—Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏", type=["docx"])

def extract_themes_and_questions(doc):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –∏–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞"""
    themes = {}
    tables_iter = iter(doc.tables)

    for para in doc.paragraphs:
        text = para.text.strip()

        if text.startswith("–¢–ï–ú–ê:"):
            current_theme = text.replace("–¢–ï–ú–ê:", "").strip()

            try:
                table = next(tables_iter)
                themes[current_theme] = []

                headers = [cell.text.strip().lower() for cell in table.rows[0].cells]
                if "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞" not in headers or "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤" not in headers:
                    continue  

                question_idx = headers.index("—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
                answers_idx = headers.index("–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")
                correct_idx = headers.index("—ç—Ç–∞–ª–æ–Ω") if "—ç—Ç–∞–ª–æ–Ω" in headers else None

                current_question = None

                for row in table.rows[1:]:
                    question_text = row.cells[question_idx].text.strip()
                    answer_text = row.cells[answers_idx].text.strip()
                    correct_text = row.cells[correct_idx].text.strip() if correct_idx else ""

                    if current_question is None or current_question["question"] != question_text:
                        current_question = {
                            "question": question_text,
                            "answers": [],
                            "correct": []
                        }
                        themes[current_theme].append(current_question)

                    current_question["answers"].append(answer_text)
                    if correct_text:
                        current_question["correct"].append(answer_text)

            except StopIteration:
                pass  

    return themes

if uploaded_file:
    doc = Document(uploaded_file)
    themes = extract_themes_and_questions(doc)

    if not themes:
        st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
    else:
        if "themes" not in st.session_state:
            st.session_state["themes"] = themes
            st.session_state["selected_theme"] = None
            st.session_state["questions"] = []
            st.session_state["current_question"] = 0
            st.session_state["test_started"] = False
            st.session_state["show_result"] = False
            st.session_state["selected_answers"] = {}
            st.session_state["show_confirm_exit"] = False  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞

        if not st.session_state.get("test_started", False):
            st.subheader("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            selected_theme = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", list(st.session_state["themes"].keys()))

            if st.button("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"):
                st.session_state["selected_theme"] = selected_theme
                st.session_state["questions"] = st.session_state["themes"][selected_theme]
                st.session_state["current_question"] = 0
                st.session_state["test_started"] = True
                st.session_state["show_result"] = False
                st.session_state["selected_answers"] = {}
                st.rerun()

        if st.session_state.get("test_started", False):
            col1, col2 = st.columns([2, 8])
            with col1:
                if st.button("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã"):
                    st.session_state["show_confirm_exit"] = True

        # --- –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ ---
        if st.session_state.get("show_confirm_exit", False):
            st.warning("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.")
            c1, c2 = st.columns(2)
            with c1:
                if st.button("‚úÖ –î–∞, –≤—ã–π—Ç–∏"):
                    st.session_state["test_started"] = False
                    st.session_state["selected_theme"] = None
                    st.session_state["questions"] = []
                    st.session_state["current_question"] = 0
                    st.session_state["show_result"] = False
                    st.session_state["selected_answers"] = {}
                    st.session_state["show_confirm_exit"] = False
                    st.rerun()
            with c2:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∞"):
                    st.session_state["show_confirm_exit"] = False
                    st.rerun()

        if st.session_state.get("test_started", False) and not st.session_state.get("show_result", False):
            q_idx = st.session_state["current_question"]
            question_data = st.session_state["questions"][q_idx]

            st.subheader(f"–í–æ–ø—Ä–æ—Å {q_idx + 1} –∏–∑ {len(st.session_state['questions'])}")
            st.write(question_data["question"])

            selected_answers = st.session_state["selected_answers"].get(q_idx, [])

            for i, answer in enumerate(question_data["answers"]):
                key = f"q{q_idx}_a{i}"
                checked = answer in selected_answers
                if st.checkbox(answer, key=key, value=checked):
                    if answer not in selected_answers:
                        selected_answers.append(answer)
                else:
                    if answer in selected_answers:
                        selected_answers.remove(answer)

            st.session_state["selected_answers"][q_idx] = selected_answers

            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col1:
                if q_idx > 0:
                    if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                        st.session_state["current_question"] -= 1
                        st.rerun()

            with col3:
                if q_idx + 1 < len(st.session_state["questions"]):
                    if st.button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                        st.session_state["current_question"] += 1
                        st.rerun()
                else:
                    if st.button("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"):
                        st.session_state["show_result"] = True
                        st.rerun()

if st.session_state.get("show_result", False):
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞")

    results_data = []
    correct_count = 0
    total_questions = len(st.session_state["questions"])

    for q_idx, question_data in enumerate(st.session_state["questions"]):
        user_answers = st.session_state["selected_answers"].get(q_idx, [])
        correct_answers = question_data["correct"]
        
        is_correct = set(user_answers) == set(correct_answers)
        results_data.append([
            question_data["question"],
            ", ".join(user_answers) if user_answers else "‚Äî",
            ", ".join(correct_answers),
            "‚úÖ" if is_correct else "‚ùå"
        ])

        if is_correct:
            correct_count += 1

    df_results = pd.DataFrame(results_data, columns=["–í–æ–ø—Ä–æ—Å", "–í–∞—à –æ—Ç–≤–µ—Ç", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"])
    st.dataframe(df_results)

    st.success(f"üéâ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_count} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤.")

    if st.button("üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑"):
        st.session_state["test_started"] = False
        st.session_state["selected_theme"] = None
        st.session_state["questions"] = []
        st.session_state["current_question"] = 0
        st.session_state["show_result"] = False
        st.session_state["selected_answers"] = {}
        st.rerun()
