import pandas as pd
import streamlit as st
import openpyxl  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞

def load_questions_from_excel(file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ Excel, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ A, —Ä–∞–≤–Ω–æ–π 1."""
    df = pd.read_excel(file, sheet_name=None, engine="openpyxl")  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
    questions = []

    for sheet_name, data in df.items():
        st.write(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º –∏–º—è –ª–∏—Å—Ç–∞

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ (A) –µ—Å—Ç—å —á–∏—Å–ª–æ 1
        start_row = None
        for i, value in enumerate(data.iloc[:, 0]):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (A)
            if pd.notna(value) and str(value).strip() == "1":
                start_row = i
                break  # –ù–∞—à–ª–∏ –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞

        if start_row is None:
            st.warning(f"‚ö†Ô∏è –ù–∞ –ª–∏—Å—Ç–µ '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ '1' –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—Å—Ç

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        data = data.iloc[start_row:]  # –û–±—Ä–µ–∑–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
        data.columns = data.iloc[0]  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        data = data[1:].reset_index(drop=True)  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –ª–∏ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        required_columns = ["‚Ññ –ø/–ø", "–¢–µ–º–∞", "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞", "–≠—Ç–∞–ª–æ–Ω"]
        if not all(col in data.columns for col in required_columns):
            st.error(f"‚ùå –û—à–∏–±–∫–∞: –ù–∞ –ª–∏—Å—Ç–µ '{sheet_name}' –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        for _, row in data.iterrows():
            questions.append({
                "block": sheet_name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ (–ª–∏—Å—Ç)
                "topic": row["–¢–µ–º–∞"],  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
                "number": row["‚Ññ –ø/–ø"],  # –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
                "question": row["–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"],  # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                "options": str(row["–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞"]).split(";"),  # –†–∞–∑–¥–µ–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
                "correct_answers": str(row["–≠—Ç–∞–ª–æ–Ω"]).split(";")  # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            })

    return questions

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–∞."""
    st.title("üìù –¢—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Å—Ç—É")
    uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", type=["xlsx", "xls"])

    if uploaded_file:
        questions = load_questions_from_excel(uploaded_file)
        if not questions:
            st.error("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return

        blocks = list(set(q['block'] for q in questions))
        selected_block = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫", blocks)
        block_questions = [q for q in questions if q['block'] == selected_block]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º
        topics = list(set(q['topic'] for q in block_questions))
        topic_dict = {topic: [q for q in block_questions if q['topic'] == topic] for topic in topics}

        score = 0
        for topic, topic_questions in topic_dict.items():
            st.write(f"### –¢–µ–º–∞: {topic}")

            for idx, q in enumerate(topic_questions):
                st.write(f"**{q['number']}. {q['question']}**")
                selected_option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", q['options'], key=f"q_{idx}", index=None)

                if st.button(f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å {q['number']}", key=f"check_{idx}"):
                    if selected_option and selected_option in q['correct_answers']:
                        st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                        score += 1
                    elif selected_option:
                        st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {', '.join(q['correct_answers'])}")
                    else:
                        st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π.")

        st.write(f"üèÜ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(questions)}")

if __name__ == "__main__":
    main()
